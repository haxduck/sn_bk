<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function($scope, $element, spUtil, $timeout, $compile) {
    /* widget controller */
    var c = this;

    c.config = {
        outputType: "encoded_query",
        closeFilter: false,
        encodedQuery: massageEncodedQuery(c.data.initialQuery),
        manageFiltersLink: "?id=lf&table=sys_filter"
    };

    function massageEncodedQuery(encodedQuery) {
        return (encodedQuery) ? encodedQuery.replace(/CONTAINS/g, "LIKE").replace(/DOES NOT CONTAIN/g, "NOT LIKE") : encodedQuery;
    }

    //test

    //検索ボタン押す時の処理
    $scope.search = function () {
        $scope.data.customFilterFlag = true;
        $scope.data.filter = c.config.encodedQuery;
        $scope.data.checkboxModels = $scope.checkboxModels;
        $scope.data.fields = $scope.options.fields;
        c.server.update($scope).then(function (response) {
            // 서버로부터 응답 받음
            console.log("서버 응답:", response);
            $scope.$emit("searchEvent", {
                customQuery: response.query
                //checkBoxs: $scope.data.checkboxModels
            });
        });
    }

    //検索制御チェックボックス追加
    var index = 0;
    var index1 = 0;
    //検索部品が画面にロードすることは検知
    var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
            mutation.addedNodes.forEach(function (node) {
                if (node.nodeType === Node.ELEMENT_NODE && node.matches('.conditions-row')) {

                    var checkboxHtml = '<input type="checkbox" ng-model="checkboxModels[' + index + ']" ng-change="onCheckboxChange(' + index + ')" class="testClass" id="test' + index + '">';
                    var checkboxElement = $compile(checkboxHtml)($scope);

                    var titleElement = node.querySelector(".field-col");
                    node.insertBefore(checkboxElement[0], titleElement);

                    //検索タイトル幅広さ修正
                    var element = node.querySelector(".ng-filter-widget-column");
                    element.classList.remove("ng-filter-widget-column");

                    index++;
                    //observer.disconnect();
                }
                //検索ボックス説明文章変更
                if (node.nodeType === 1 && node.matches('.outer-condition-container')) {
                    var titleText = node.querySelector("span:first-child");
                    if (node) {
                        titleText.innerText = "検索を行いたい項目にチェックを入れてください。";
                    }

                    //observer.disconnect();
                }
                //キーワード名翻訳
                if (node.nodeType === 1 && node.matches('.filter-field-lists-parent > button')) {
                    if (index1 == 0) {
                        node.innerText = c.data.keywordName;
                    } else if (index1 == 1) {
                        node.innerText = "キーワード（含まない）";
                    }
                    index1++;
                }

                //test
                if (node.nodeType === 1 && node.matches('.form-group')) {
                    var inputList = ["input", "select", "span > span > .btn"];
                    inputList.forEach(function (input) {
                        var targetElement = node.querySelector(input);
                        if (targetElement) targetElement.disabled = true;
                    });
                }
                if (node.nodeType === Node.ELEMENT_NODE && node.matches('.btn-select') && !node.classList.contains('field-list-button')) {
                    if (node) {
                        node.disabled = true;
                        node.classList.add('block');
                    }
                }

            });
        });
    });
    observer.disconnect();

    // 관찰할 대상 요소와 관찰할 설정을 지정합니다.
    var target = document.querySelector('#searchContainer');
    var config = {
        childList: true,
        subtree: true
    };

    // 관찰을 시작합니다.
    observer.observe(target, config);

    //엔터 이벤트 방지
    document.querySelector('#searchContainer').addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            // 여기에 Enter 키를 눌렀을 때 실행하고 싶은 코드 추가
            console.log('Enter 키 이벤트가 방지되었습니다.');
        }
    });

    //체크박스
    $scope.checkboxModels = [];
    $scope.onCheckboxChange = function (index) {
        console.log('체크박스 ' + index + ' 상태 변경:', $scope.checkboxModels[index]);

        var searchContainer = document.querySelector("#searchContainer");
        var conditionContainers = searchContainer.querySelectorAll(".conditions-row > ng-switch > label > ng-switch");

        var inputList = ["input", "select", "button"];
        inputList.forEach(function (input) {
            var targetElement = conditionContainers[index].querySelectorAll(input)[0];
            var referenceElement = conditionContainers[index].querySelectorAll(input)[2];
            if (targetElement) {
                if ($scope.checkboxModels[index]) {
                    targetElement.disabled = false;
                    targetElement.classList.remove('block');
                } else{
                    targetElement.disabled = true;
                    targetElement.classList.add('block');
                }
            }
            if (referenceElement) {
                referenceElement.disabled = !$scope.checkboxModels[index]
            }
        });

    };

    //test button
    $scope.test1 = function () {
        $scope.data.customFilterFlag = true;
        $scope.data.filter = c.config.encodedQuery;
        $scope.data.checkboxModels = $scope.checkboxModels;
        $scope.data.fields = $scope.options.fields;
        c.server.update($scope).then(function (response) {
            // 서버로부터 응답 받음
            console.log("서버 응답:", response);
            $scope.$emit("searchEvent", {
                customQuery: response.query
                //checkBoxs: $scope.data.checkboxModels
            });
        });
    }

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.filter-footer {&#13;
  display:none;&#13;
}&#13;
&#13;
.btn-col {&#13;
	display:none !important;&#13;
}&#13;
&#13;
.operator-col {&#13;
	display:none !important;&#13;
	//pointer-events: none;&#13;
}&#13;
&#13;
/*.ng-filter-widget-column {&#13;
  //display: inline-block !important;&#13;
  width: 2px !important;&#13;
}*/&#13;
&#13;
/*.filter-field-lists-parent {&#13;
  display: inline-block !important;&#13;
  //width: 2px;&#13;
  //display: inline-block !important;&#13;
}*/&#13;
&#13;
.field-list-button {&#13;
	pointer-events: none;&#13;
  border: 0px !important;&#13;
  //width: 10% !important;&#13;
}&#13;
&#13;
.glyphicon-triangle-bottom {&#13;
	display: none; &#13;
}&#13;
&#13;
.filter-header {&#13;
	display:none;&#13;
}&#13;
&#13;
.buttonContainer {&#13;
  //background-color:#e7e9eb;&#13;
  text-align: right;&#13;
}&#13;
&#13;
.searchBtn {&#13;
  margin-top:10px;&#13;
  margin-bottom:10px;&#13;
  margin-right:16%;&#13;
}&#13;
&#13;
.outer-condition-container {&#13;
	background-color:#FFFFFF;&#13;
}&#13;
&#13;
.ruleset-label {&#13;
	display:none !important;&#13;
}&#13;
&#13;
.editor-col {&#13;
  //display:none&#13;
	//pointer-events: none !important;&#13;
}&#13;
&#13;
.block {&#13;
	pointer-events: none !important;&#13;
  background-color: #f6f6f8 !important;&#13;
}&#13;
&#13;
&#13;
//////////&#13;
/*.field-col {&#13;
  display:inline-block;&#13;
  height:10px;&#13;
  width:10% !important;&#13;
  //background-color: red !important;&#13;
}&#13;
&#13;
.filter-field-lists-parent {&#13;
  width:10px !important;;&#13;
  background-color: yellow !important;&#13;
}*/&#13;
&#13;
.field-col &gt; .filter-field-lists-parent &gt; button {&#13;
  width: 200px !important;&#13;
  text-align: left;&#13;
  //margin-left:50%;&#13;
}&#13;
// .ng-filter-widget-column {&#13;
//   display:inline-block;&#13;
//   //background-color: blue !important;&#13;
// }&#13;
&#13;
.testClass {&#13;
  margin-bottom: 23px;&#13;
  //margin-left:30%;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>sn-desktop-filter-bk</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>SN Desktop Filter bk</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    /* populate the 'data' object */
    /* e.g., data.table = $sp.getValue('table'); */
    data.table = input.table || options.table || $sp.getParameter("table");
    if (data.table == 'incident') {
        data.initialQuery = "123TEXTQUERY321=^123TEXTQUERY321!=^numberCONTAINS^assigned_to=^state=1^sys_created_onON";
    } else {
        data.initialQuery = options.initialQuery || $sp.getParameter("filter");
    }

    data.keywordName = gs.getMessage('keywords');

    //test
		 //var fieldList = options.fields;
    if (input && input.customFilterFlag) {
			data.query = "";
        var conditions;
        conditions = input.filter.split('^');
        //var fieldList = $sp.getListColumns(data.table).split(',');
			var fieldList = input.fields.split(',');
			data.test = [];
			data.test.push(fieldList);
		var gr = new GlideRecord(data.table);

        // Step 2 & 3: Iterate over conditions to extract operators and operands
        conditions.forEach(function(condition, index) {
					
					
            var parts = condition.match(/(.*?)((=|!=|LIKE|ON|IN))(.*$)/);
            if (parts[4] != "" && index == 0 && input.checkboxModels[0]) { //キーワード含む
                var query = "";
                fieldList.forEach(function(field, index) {
                    var fieldElement = gr.getElement(field); // 'category' 필드의 GlideElement 객체 얻기
                    var fieldType = fieldElement.getED().getInternalType(); // 필드 유형 확인

                    var operator = "LIKE";

                    if (fieldType == "string" || fieldType == "reference") {
                        if (index == 0) {
                            //query = gr.addQuery(field, operator, parts[4]);
                            query += field + operator + parts[4];
                        } else {
                            //query.addOrCondition(field, operator, parts[4]);
                            query += "^OR" + field + operator + parts[4];
                        }
                    } else {
                        var choice_value;
                        var gr_choice = new GlideRecord("sys_choice");
                        gr_choice.addQuery('name', data.table);
                        gr_choice.addQuery('element', field);
                        gr_choice.query();
                        while (gr_choice.next()) {
                            if (gr_choice.label.toLowerCase().indexOf(parts[4].toLowerCase()) > -1) {
                                choice_value = gr_choice.value;
                                break;
                            }
                        }

                        //gr.addQuery(field, parts[3], choice_value);
                        if (choice_value) {
                            query += "^OR" + field + parts[3] + choice_value;
                        }

                    }
                });

                //gr.addEncodedQuery(query);
                data.query += query;

            } else if (parts[4] != "" && index == 1 && input.checkboxModels[1]) { //キーワード含まない
                var query = "";
                fieldList.forEach(function(field, index) {
                    var fieldElement = gr.getElement(field); // 'category' 필드의 GlideElement 객체 얻기
                    var fieldType = fieldElement.getED().getInternalType(); // 필드 유형 확인

                    var operator = "NOT LIKE";

                    if (fieldType == "string" || fieldType == "reference") {
                        if (index == 0) {
                            //query = gr.addQuery(field, operator, parts[4]);
                            query += field + operator + parts[4];
                        } else {
                            //query.addOrCondition(field, operator, parts[4]);
                            query += "^" + field + operator + parts[4];
                        }
                    } else {
                        var choice_value;
                        var gr_choice = new GlideRecord("sys_choice");
                        gr_choice.addQuery('name', data.table);
                        gr_choice.addQuery('element', field);
                        gr_choice.query();
                        while (gr_choice.next()) {
                            if (gr_choice.label.toLowerCase().indexOf(parts[4].toLowerCase()) > -1) {
                                choice_value = gr_choice.value;
                                break;
                            }
                        }

                        //gr.addQuery(field, parts[3], choice_value);
                        if (choice_value) {
                            query += "^" + field + parts[3] + choice_value;
                        }

                    }
                });

                //gr.addEncodedQuery(query);
                data.query += query;


            } else if (parts[4] != "" && input.checkboxModels[index]) {
                // Push an array with the field name, operator, and value
                //result.push([parts[1], parts[3], parts[4]]);
                //if (parts[3] == "LIKE") parts[3] = "CONTAINS";
                //gr.addQuery(parts[1], parts[3], parts[4]);
                //gr.addEncodedQuery(parts[1] + parts[3] + parts[4]);
				//gs.info("test2 " + parts[1] + parts[3] + parts[4]);
							if (index != 0) data.query += "^";
							data.query += parts[1] + parts[3] + parts[4];
            }
        });

    }
    //test

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-04-06 02:15:31</sys_created_on>
        <sys_id>06345a0b97518210e516fcdfe153af7f</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>SN Desktop Filter bk</sys_name>
        <sys_package display_value="sn_bk" source="x_541886_sn_bk">57235e8797518210e516fcdfe153af43</sys_package>
        <sys_policy/>
        <sys_scope display_value="sn_bk">57235e8797518210e516fcdfe153af43</sys_scope>
        <sys_update_name>sp_widget_06345a0b97518210e516fcdfe153af7f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-06 02:15:49</sys_updated_on>
        <template><![CDATA[<button ng-click="test1()">test</button>
<!-- 検索ボックスにID追加 -->
<div id="searchContainer">
	<sn-filter-widget uid="c.data.table" table="{{c.data.table}}" filter-config="c.config"></sn-filter-widget>
  	<!-- 検索ボタン追加 -->
    <div class="buttonContainer">
      <button class="btn btn-primary searchBtn" ng-click="search()">${Search}</button>
    </div>
</div>]]></template>
    </sp_widget>
</record_update>
